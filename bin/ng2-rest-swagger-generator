#!/usr/bin/env node

var run = require('../bundle.js').run;

var fs = require('fs');

var jsons = [];
var links = [];
var enableHttps = false;

function findPathesFrom(n) {
    for (var i = n; ; i++) {
        if (fs.existsSync(process.argv[i])) {
            jsons.push(process.argv[i]);
            continue;
        }
        break;
    }
}


function checkLink(n) {
    var regex = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
    for (var i = n; ; i++) {
        if (regex.test(process.argv[i])) {
            links.push(process.argv[i]);
            continue;
        }
        break;
    }
}

try {
    if (process.argv.length >= 3) {
        for (var i = 0; i < process.argv.length; i++) {
            if (process.argv[i] === '-p') {
                findPathesFrom(i + 1);
                break;
            }
        }

        for (var i = 0; i < process.argv.length; i++) {
            if (process.argv[i] === '-l') {
                checkLink(i + 1);
                break;
            }
        }

        for (var i = 0; i < process.argv.length; i++) {
            if (process.argv[i] === '-s') {
                enableHttps = true;
                break;
            }
        }

        for (var i = 0; i < process.argv.length; i++) {
            if (process.argv[i] === '-v' || process.argv[i] === '--version') {
                var pack = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8'));
                console.log('version: ' + pack['version']);
                process.exit(0);
            }
        }
    }
} catch (error) {
    console.log(error)
}

// console.log('enableHttps', enableHttps)
run(jsons, links, enableHttps);